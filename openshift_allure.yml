apiVersion: v1
kind: Template
message: "Login to allure
metadata:
  annotations:
    description: The Allure OpenShift template
    tags: "instant-app,allure"
  name: allure
objects:
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: allure
      name: allure
    spec:
      ports:
        - name: allure
          port: 4040
          protocol: TCP
          targetPort: 4040
      selector:
        app: allure
        deploymentconfig: allure
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        description: Route for allure's http service.
      labels:
        app: allure
      name: allure
    spec:
      port:
        targetPort: allure
      tls:
        termination: edge
      to:
        kind: Service
        name: allure
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: allure
      name: allure
    spec:
      tags:
        - annotations:
            description: The allure Docker image
            tags: allure
          from:
            kind: DockerImage
            name: "rstens/allure:${ALLURE_VERSION}"
          importPolicy: {}
          name: "${allure_VERSION}"
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: allure
        deploymentconfig: allure
      name: allure
    spec:
      replicas: 1
      selector:
        app: allure
        deploymentconfig: allure
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/container.allure.image.entrypoint: '["./bin/run.sh"]'
          creationTimestamp: null
          labels:
            app: allure
            deploymentconfig: allure
        spec:
          containers:
            - env:
                - name: allure_JDBC_PASSWORD
                  value: "${POSTGRESQL_PASSWORD}"
                - name: allure_JDBC_URL
                  value: "jdbc:postgresql://postgresql-allure/ALLURE"
                - name: allure_JDBC_USERNAME
                  value: ALLURE
              volumeMounts:
                - mountPath: /opt/allure/data
                  name: ALLURE-data
                  subPath: data
                - mountPath: /opt/allure/logs
                  name: ALLURE-logs
                  subPath: logs
                - mountPath: /opt/allure/temp
                  name: ALLURE-temp
                  subPath: temp
                - mountPath: /opt/allure/extensions/plugins
                  name: ALLURE-plugins
                  subPath: plugins
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 9000
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 5
              name: allure
              ports:
                - containerPort: 9000
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 9000
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: 1
                  memory: 4Gi
                requests:
                  cpu: 500m
                  memory: 2Gi
              terminationMessagePath: /dev/termination-log
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: ALLURE-data
            - emptyDir: {}
              name: ALLURE-logs
            - emptyDir: {}
              name: ALLURE-temp
            - name: ALLURE-plugins
              persistentVolumeClaim:
                claimName: allure-data
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - allure
            from:
              kind: ImageStreamTag
              name: "allure:${allure_VERSION}"
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: allure
      name: postgresql-allure
    spec:
      ports:
        - name: postgresql
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: allure
        deploymentconfig: postgresql-allure
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: allure
        deploymentconfig: postgresql-allure
      name: postgresql-allure
    spec:
      replicas: 1
      selector:
        app: allure
        deploymentconfig: postgresql-allure
      strategy:
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: allure
            deploymentconfig: postgresql-allure
        spec:
          containers:
            - env:
                - name: POSTGRESQL_USER
                  value: ALLURE
                - name: POSTGRESQL_PASSWORD
                  value: "${POSTGRESQL_PASSWORD}"
                - name: POSTGRESQL_DATABASE
                  value: ALLURE
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 5432
                timeoutSeconds: 1
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - "-i"
                    - "-c"
                    - >-
                      psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                      $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  cpu: 250m
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 100Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: postgresql-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: postgresql-data
              persistentVolumeClaim:
                claimName: postgresql-allure-data
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: "postgresql:9.5"
              namespace: openshift
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: allure
      name: postgresql-allure-data
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: ${POSTGRESQL_PERSISTENT_VOLUME_CLASS}
      resources:
        requests:
          storage: "${POSTGRESQL_VOLUME_CAPACITY}"
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: allure
      name: allure-data
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: ${ALLURE_PERSISTENT_VOLUME_CLASS}
      resources:
        requests:
          storage: "${ALLURE_VOLUME_CAPACITY}"
parameters:
  - displayName: allure version
    name: ALLURE_VERSION
    required: true
    value: "7.9.1"
  - description: Volume space available for allure
    displayName: allure Volume Capacity
    name: ALLURE_VOLUME_CAPACITY
    required: true
    value: 5Gi
  - name: ALLURE_PERSISTENT_VOLUME_CLASS
    displayName: Persistent Volume Class name
    description: The class of the volume; netapp-file-standard
    required: false
    value: netapp-file-standard

